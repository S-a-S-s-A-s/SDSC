// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: grpc/SDSC.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SDSCClient is the client API for SDSC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SDSCClient interface {
	GetData(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	DeleteData(ctx context.Context, in *Req, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateData(ctx context.Context, in *ReqUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sDSCClient struct {
	cc grpc.ClientConnInterface
}

func NewSDSCClient(cc grpc.ClientConnInterface) SDSCClient {
	return &sDSCClient{cc}
}

func (c *sDSCClient) GetData(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/SDSC/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDSCClient) DeleteData(ctx context.Context, in *Req, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/SDSC/DeleteData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDSCClient) UpdateData(ctx context.Context, in *ReqUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/SDSC/UpdateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SDSCServer is the server API for SDSC service.
// All implementations must embed UnimplementedSDSCServer
// for forward compatibility
type SDSCServer interface {
	GetData(context.Context, *Req) (*Res, error)
	DeleteData(context.Context, *Req) (*emptypb.Empty, error)
	UpdateData(context.Context, *ReqUpdate) (*emptypb.Empty, error)
	mustEmbedUnimplementedSDSCServer()
}

// UnimplementedSDSCServer must be embedded to have forward compatible implementations.
type UnimplementedSDSCServer struct {
}

func (UnimplementedSDSCServer) GetData(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedSDSCServer) DeleteData(context.Context, *Req) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedSDSCServer) UpdateData(context.Context, *ReqUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedSDSCServer) mustEmbedUnimplementedSDSCServer() {}

// UnsafeSDSCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SDSCServer will
// result in compilation errors.
type UnsafeSDSCServer interface {
	mustEmbedUnimplementedSDSCServer()
}

func RegisterSDSCServer(s grpc.ServiceRegistrar, srv SDSCServer) {
	s.RegisterService(&SDSC_ServiceDesc, srv)
}

func _SDSC_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDSCServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SDSC/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDSCServer).GetData(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDSC_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDSCServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SDSC/DeleteData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDSCServer).DeleteData(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDSC_UpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDSCServer).UpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SDSC/UpdateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDSCServer).UpdateData(ctx, req.(*ReqUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// SDSC_ServiceDesc is the grpc.ServiceDesc for SDSC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SDSC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SDSC",
	HandlerType: (*SDSCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _SDSC_GetData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _SDSC_DeleteData_Handler,
		},
		{
			MethodName: "UpdateData",
			Handler:    _SDSC_UpdateData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/SDSC.proto",
}
